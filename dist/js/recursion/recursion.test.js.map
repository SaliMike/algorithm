{"version":3,"sources":["../../../src/recursion/recursion.test.js"],"names":["describe","it","data","condition","operation","callback","result","expect","toBe","arr","sum","value","shift"],"mappings":"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","sourcesContent":["import recursion from './recursion';\n\ndescribe('[TEST RECURSION] -', () => {\n  it('should return 0', async () => {\n    const data = 5;\n    const condition = data => data <= 0;\n    const operation = data => data - 1;\n    const callback = data => data;\n    const result = await recursion(data, condition, operation, callback);\n    expect(result).toBe(0);\n  });\n\n  it('should return 5', async () => {\n    const data = 25;\n    const condition = data => data <= 5;\n    const operation = data => data - 1;\n    const callback = data => data;\n    const result = await recursion(data, condition, operation, callback);\n    expect(result).toBe(5);\n  });\n\n  it('should return 20', async () => {\n    const data = { arr: [5, 5, 10, 5], sum: 0 };\n    const condition = data => data.sum >= 20;\n    const operation = data => {\n      const value = data.arr.shift();\n      return { arr: data.arr, sum: data.sum + value };\n    };\n    const callback = data => data;\n    const result = await recursion(data, condition, operation, callback);\n    expect(result.sum).toBe(20);\n  });\n\n  it('should return 13', async () => {\n    const data = { arr: [2, 1, 10, 1, 5], sum: 0 };\n    const condition = data => data.sum >= 4;\n    const operation = data => {\n      const value = data.arr.shift();\n      return { arr: data.arr, sum: data.sum + value };\n    };\n    const callback = data => data;\n    const result = await recursion(data, condition, operation, callback);\n    expect(result.sum).toBe(13);\n  });\n});\n"],"file":"recursion.test.js"}